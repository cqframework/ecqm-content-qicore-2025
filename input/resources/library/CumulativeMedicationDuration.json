{
  "resourceType": "Library",
  "id": "CumulativeMedicationDuration",
  "meta": {
    "profile": [ "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary", "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-computablelibrary", "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary", "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-executablelibrary", "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library", "http://hl7.org/fhir/uv/cql/StructureDefinition/elm-json-library", "http://hl7.org/fhir/uv/cql/StructureDefinition/elm-xml-library" ]
  },
  "language": "en",
  "text": {
    "status": "extensions",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n    <table class=\"grid dict\">\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Title: </b></th>\n            <td style=\"padding-left: 4px;\">CumulativeMedicationDuration</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Id: </b></th>\n            <td style=\"padding-left: 4px;\">CumulativeMedicationDuration</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Version: </b></th>\n            <td style=\"padding-left: 4px;\">5.0.000</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Url: </b></th>\n            <td style=\"padding-left: 4px;\">https://madie.cms.gov/Library/CumulativeMedicationDuration</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\">\n                <b>\n                    \n                        official\n                    \n                </b>\n            </th>\n            <td style=\"padding-left: 4px;\">\n                \n                <p style=\"margin-bottom: 5px;\">\n                    <span>67928e2094e897688edaf46a</span>\n                </p>\n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Type: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                    \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>system: </b> <span>http://terminology.hl7.org/CodeSystem/library-type</span>\n                        </p>\n                        \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>code: </b> <span>logic-library</span>\n                        </p>\n                        \n                        \n                    \n                \n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Date: </b></th>\n            <td style=\"padding-left: 4px;\">2025-05-27T15:45:21+00:00</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Publisher: </b></th>\n            <td style=\"padding-left: 4px;\">ICF</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Description: </b></th>\n            <td style=\"padding-left: 4px;\">This library provides cumulative medication duration calculation\nlogic for use with FHIR medication prescription, administration, and dispensing\nresources. The logic here follows the guidance provided as part of the 5.6\nversion of Quality Data Model.</td>\n        </tr>\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Related Artifacts: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                \n                \n                <p><b>Dependencies</b></p>\n                <ul>\n                  \n                    <li>https://madie.cms.gov/Library/FHIRHelpers|4.4.000</li>\n                  \n                    <li>https://madie.cms.gov/Library/QICoreCommon|3.0.000</li>\n                  \n                    <li>http://terminology.hl7.org/CodeSystem/v3-TimingEvent</li>\n                  \n                    <li>http://hl7.org/fhir/event-timing</li>\n                  \n                </ul>\n                \n                \n                \n                \n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n        <tr>\n          <th scope=\"row\"><b>Data Requirements:</b></th>\n          <td style=\"padding-left: 4px;\">\n            <table class=\"grid-dict\">\n              <tr><th><b>Type</b></th><th><b>Profile</b></th><th><b>MS</b></th><th><b>Code Filter</b></th></tr>\n              \n                <tr>\n                  <th>MedicationAdministration</th>\n                  <th>http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medicationadministration</th>\n                  <th>;;</th>\n                  <th>\n                    \n                  </th>\n                </tr>\n              \n            </table>\n          </td>\n        </tr>\n        \n\n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><a id=\"cql-content\"><b>Content: </b></a> text/cql</th></tr>\n              <tr><td><pre><code class=\"language-cql\">library CumulativeMedicationDuration version '5.0.000'\n\nusing QICore version '6.0.0'\n\ninclude FHIRHelpers version '4.4.000' called FHIRHelpers\ninclude QICoreCommon version '3.0.000'\n\n// These code systems are not known to the MAT environment yet, request to have them added submitted\ncodesystem &quot;V3TimingEvent&quot;: 'http://terminology.hl7.org/CodeSystem/v3-TimingEvent'\ncodesystem &quot;EventTiming&quot;: 'http://hl7.org/fhir/event-timing'\n\ncode &quot;HS&quot;: 'HS' from &quot;V3TimingEvent&quot; // event occurs [offset] before the hour of sleep (or trying to)\ncode &quot;WAKE&quot;: 'WAKE' from &quot;V3TimingEvent&quot; // event occurs [offset] after waking\ncode &quot;C&quot;: 'C' from &quot;V3TimingEvent&quot; //\tevent occurs at a meal (from the Latin cibus)\ncode &quot;CM&quot;: 'CM' from &quot;V3TimingEvent&quot; //\tevent occurs at breakfast (from the Latin cibus matutinus)\ncode &quot;CD&quot;: 'CD' from &quot;V3TimingEvent&quot; //\tevent occurs at lunch (from the Latin cibus diurnus)\ncode &quot;CV&quot;: 'CV' from &quot;V3TimingEvent&quot; //\tevent occurs at dinner (from the Latin ante cibus vespertinus)\ncode &quot;AC&quot;: 'AC' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] before a meal (from the Latin ante cibus)\ncode &quot;ACM&quot;: 'ACM' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] before breakfast (from the Latin ante cibus matutinus)\ncode &quot;ACD&quot;: 'ACD' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] before lunch (from the Latin ante cibus diurnus)\ncode &quot;ACV&quot;: 'ACV' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] before dinner (from the Latin ante cibus vespertinus)\ncode &quot;PC&quot;: 'PC' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] after a meal (from the Latin post cibus)\ncode &quot;PCM&quot;: 'PCM' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] after breakfast (from the Latin post cibus matutinus)\ncode &quot;PCD&quot;: 'PCD' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] after lunch (from the Latin post cibus diurnus)\ncode &quot;PCV&quot;: 'PCV' from &quot;V3TimingEvent&quot; //\tevent occurs [offset] after dinner (from the Latin post cibus vespertinus)\n\ncode &quot;MORN&quot;: 'MORN' from EventTiming //\tEvent occurs during the morning. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;MORN.early&quot;: 'MORN.early' from EventTiming //\tEarly Morning\tEvent occurs during the early morning. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;MORN.late&quot;: 'MORN.late' from EventTiming // Late Morning\tEvent occurs during the late morning. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;NOON&quot;: 'NOON' from EventTiming //\tNoon\tEvent occurs around 12:00pm. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;AFT&quot;: 'AFT' from EventTiming //\tAfternoon\tEvent occurs during the afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;AFT.early&quot;: 'AFT.early' from EventTiming //\tEarly Afternoon\tEvent occurs during the early afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;AFT.late&quot;: 'AFT.late' from EventTiming //\tLate Afternoon\tEvent occurs during the late afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;EVE&quot;: 'EVE' from EventTiming //\tEvening\tEvent occurs during the evening. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;EVE.early&quot;: 'EVE.early' from EventTiming //\tEarly Evening\tEvent occurs during the early evening. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;EVE.late&quot;: 'EVE.late' from EventTiming //\tLate Evening\tEvent occurs during the late evening. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;NIGHT&quot;: 'NIGHT' from EventTiming //\tNight\tEvent occurs during the night. The exact time is unspecified and established by institution convention or patient interpretation.\ncode &quot;PHS&quot;: 'PHS' from EventTiming //\tAfter Sleep\tEvent occurs [offset] after subject goes to sleep. The exact time is unspecified and established by institution convention or patient interpretation.\n\ncode &quot;Every eight hours (qualifier value)&quot;: '307469008' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every eight hours (qualifier value)'\ncode &quot;Every eight to twelve hours (qualifier value)&quot;: '396140003' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every eight to twelve hours (qualifier value)'\ncode &quot;Every forty eight hours (qualifier value)&quot;: '396131002' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every forty eight hours (qualifier value)'\ncode &quot;Every forty hours (qualifier value)&quot;: '396130001' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every forty hours (qualifier value)'\ncode &quot;Every four hours (qualifier value)&quot;: '225756002' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every four hours (qualifier value)'\ncode &quot;Every seventy two hours (qualifier value)&quot;: '396143001' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every seventy two hours (qualifier value)'\ncode &quot;Every six hours (qualifier value)&quot;: '307468000' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every six hours (qualifier value)'\ncode &quot;Every six to eight hours (qualifier value)&quot;: '396139000' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every six to eight hours (qualifier value)'\ncode &quot;Every thirty six hours (qualifier value)&quot;: '396126004' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every thirty six hours (qualifier value)'\ncode &quot;Every three to four hours (qualifier value)&quot;: '225754004' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every three to four hours (qualifier value)'\ncode &quot;Every three to six hours (qualifier value)&quot;: '396127008' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every three to six hours (qualifier value)'\ncode &quot;Every twelve hours (qualifier value)&quot;: '307470009' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every twelve hours (qualifier value)'\ncode &quot;Every twenty four hours (qualifier value)&quot;: '396125000' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every twenty four hours (qualifier value)'\ncode &quot;Every two to four hours (qualifier value)&quot;: '225752000' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Every two to four hours (qualifier value)'\ncode &quot;Four times daily (qualifier value)&quot;: '307439001' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Four times daily (qualifier value)'\ncode &quot;Once daily (qualifier value)&quot;: '229797004' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Once daily (qualifier value)'\ncode &quot;One to four times a day (qualifier value)&quot;: '396109005' from QICoreCommon.&quot;SNOMEDCT&quot; display 'One to four times a day (qualifier value)'\ncode &quot;One to three times a day (qualifier value)&quot;: '396108002' from QICoreCommon.&quot;SNOMEDCT&quot; display 'One to three times a day (qualifier value)'\ncode &quot;One to two times a day (qualifier value)&quot;: '396107007' from QICoreCommon.&quot;SNOMEDCT&quot; display 'One to two times a day (qualifier value)'\ncode &quot;Three times daily (qualifier value)&quot;: '229798009' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Three times daily (qualifier value)'\ncode &quot;Twice a day (qualifier value)&quot;: '229799001' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Twice a day (qualifier value)'\ncode &quot;Two to four times a day (qualifier value)&quot;: '396111001' from QICoreCommon.&quot;SNOMEDCT&quot; display 'Two to four times a day (qualifier value)'\n\nparameter ErrorLevel String default 'Warning'\n\ncontext Patient\n\n/*\n Goal is to get to number of days\n Two broad approaches to the calculation:\n  1) Based on supply and frequency, calculate the number of expected days the medication will cover/has covered\n  2) Based on relevant period, determine a covered interval and calculate the length of that interval in days\nThis topic covers several use cases and illustrates how to calculate Cumulative\nMedication Duration for each type of medication resource using the supply and\nfrequency approach.\n*/\n\n/*\n  For the first approach, we need to get from frequency to a frequency/day\n  So we define ToDaily\n*/\n\n/*\n  Calculates daily frequency given frequency within a period\n*/\ndefine function ToDaily(frequency System.Integer, period System.Quantity):\n  case period.unit\n    when 'h' then frequency * (24.0 / period.value)\n    when 'min' then frequency * (24.0 / period.value) * 60\n    when 's' then frequency * (24.0 / period.value) * 60 * 60\n    when 'd' then frequency * (24.0 / period.value) / 24\n    when 'wk' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'mo' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'a' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    when 'hour' then frequency * (24.0 / period.value)\n    when 'minute' then frequency * (24.0 / period.value) * 60\n    when 'second' then frequency * (24.0 / period.value) * 60 * 60\n    when 'day' then frequency * (24.0 / period.value) / 24\n    when 'week' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'month' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'year' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    when 'hours' then frequency * (24.0 / period.value)\n    when 'minutes' then frequency * (24.0 / period.value) * 60\n    when 'seconds' then frequency * (24.0 / period.value) * 60 * 60\n    when 'days' then frequency * (24.0 / period.value) / 24\n    when 'weeks' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'months' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'years' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    else Message(null, true, 'CMDLogic.ToDaily.UnknownUnit', ErrorLevel, 'Unknown unit ' &amp; period.unit)\n  end\n\n/*\n  Returns a daily frequency for the given code representation of frequency.\n  The function expects codes from the [EventTiming](http://hl7.org/fhir/codesystem-event-timing.html) or\n  [V3TimingEvent](http://hl7.org/fhir/v3/TimingEvent/cs.html) code systems.\n  // TODO: Determine whether or not we should use timing.code at all....\n*/\ndefine function ToDaily(frequency Code):\n  case\n    when frequency ~ &quot;HS&quot; then 1 // event occurs [offset] before the hour of sleep (or trying to)\n    when frequency ~ &quot;WAKE&quot; then 1 // event occurs [offset] after waking\n    when frequency ~ &quot;C&quot; then 3 //\tevent occurs at a meal (from the Latin cibus)\n    when frequency ~ &quot;CM&quot; then 1 //\tevent occurs at breakfast (from the Latin cibus matutinus)\n    when frequency ~ &quot;CD&quot; then 1 //\tevent occurs at lunch (from the Latin cibus diurnus)\n    when frequency ~ &quot;CV&quot; then 1 //\tevent occurs at dinner (from the Latin ante cibus vespertinus)\n    when frequency ~ &quot;AC&quot; then 3 //\tevent occurs [offset] before a meal (from the Latin ante cibus)\n    when frequency ~ &quot;ACM&quot; then 1 //\tevent occurs [offset] before breakfast (from the Latin ante cibus matutinus)\n    when frequency ~ &quot;ACD&quot; then 1 //\tevent occurs [offset] before lunch (from the Latin ante cibus diurnus)\n    when frequency ~ &quot;ACV&quot; then 1 //\tevent occurs [offset] before dinner (from the Latin ante cibus vespertinus)\n    when frequency ~ &quot;PC&quot; then 3 //\tevent occurs [offset] after a meal (from the Latin post cibus)\n    when frequency ~ &quot;PCM&quot; then 1 //\tevent occurs [offset] after breakfast (from the Latin post cibus matutinus)\n    when frequency ~ &quot;PCD&quot; then 1 //\tevent occurs [offset] after lunch (from the Latin post cibus diurnus)\n    when frequency ~ &quot;PCV&quot; then 1 //\tevent occurs [offset] after dinner (from the Latin post cibus vespertinus)\n\n    when frequency ~ &quot;MORN&quot; then 1 //\tEvent occurs during the morning. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;MORN.early&quot; then 1 //\tEarly Morning\tEvent occurs during the early morning. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;MORN.late&quot; then 1 // Late Morning\tEvent occurs during the late morning. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;NOON&quot; then 1 //\tNoon\tEvent occurs around 12:00pm. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;AFT&quot; then 1 //\tAfternoon\tEvent occurs during the afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;AFT.early&quot; then 1 //\tEarly Afternoon\tEvent occurs during the early afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;AFT.late&quot; then 1 //\tLate Afternoon\tEvent occurs during the late afternoon. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;EVE&quot; then 1 //\tEvening\tEvent occurs during the evening. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;EVE.early&quot; then 1 //\tEarly Evening\tEvent occurs during the early evening. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;EVE.late&quot; then 1 //\tLate Evening\tEvent occurs during the late evening. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;NIGHT&quot; then 1 //\tNight\tEvent occurs during the night. The exact time is unspecified and established by institution convention or patient interpretation.\n    when frequency ~ &quot;PHS&quot; then 1 //\tAfter Sleep\tEvent occurs [offset] after subject goes to sleep. The exact time is unspecified and established by institution convention or patient interpretation.\n\n    when frequency ~ &quot;Once daily (qualifier value)&quot; then 1.0\n    when frequency ~ &quot;Twice a day (qualifier value)&quot; then 2.0\n    when frequency ~ &quot;Three times daily (qualifier value)&quot; then 3.0\n    when frequency ~ &quot;Four times daily (qualifier value)&quot; then 4.0\n    when frequency ~ &quot;Every twenty four hours (qualifier value)&quot; then 1.0\n    when frequency ~ &quot;Every twelve hours (qualifier value)&quot; then 2.0\n    when frequency ~ &quot;Every thirty six hours (qualifier value)&quot; then 0.67\n    when frequency ~ &quot;Every eight hours (qualifier value)&quot; then 3.0\n    when frequency ~ &quot;Every four hours (qualifier value)&quot; then 6.0\n    when frequency ~ &quot;Every six hours (qualifier value)&quot; then 4.0\n    when frequency ~ &quot;Every seventy two hours (qualifier value)&quot; then 0.33\n    when frequency ~ &quot;Every forty eight hours (qualifier value)&quot; then 0.5\n    when frequency ~ &quot;Every eight to twelve hours (qualifier value)&quot; then 3.0\n    when frequency ~ &quot;Every six to eight hours (qualifier value)&quot; then 4.0\n    when frequency ~ &quot;Every three to four hours (qualifier value)&quot; then 8.0\n    when frequency ~ &quot;Every three to six hours (qualifier value)&quot; then 8.0\n    when frequency ~ &quot;Every two to four hours (qualifier value)&quot; then 12.0\n    when frequency ~ &quot;One to four times a day (qualifier value)&quot; then 4.0\n    when frequency ~ &quot;One to three times a day (qualifier value)&quot; then 3.0\n    when frequency ~ &quot;One to two times a day (qualifier value)&quot; then 2.0\n    when frequency ~ &quot;Two to four times a day (qualifier value)&quot; then 4.0\n\n    else Message(null, true, 'CMDLogic.ToDaily.UnknownFrequencyCode', ErrorLevel, 'Unknown frequency code ' &amp; frequency.code)\n  end\n\n/*\nNow that we have a ToDaily function, we can approach calculation of the\nduration of medication for an order. First, consider the definitions\nfor each element:\n* 1 and only 1 dosageInstruction\n* 1 and only 1 doseAndRate\n* 1 timing with 1 repeat\n* frequency, frequencyMax, defaulting to 1\n* period, periodUnit, defaulting to 1 'd'\n* doseQuantity or doseRange\n* timeOfDay\n* authoredOn: The date the prescription was written\n* dispenseRequest.validityPeriod: Time period supply is authorized for\n* dispenseRequest.quantity: amount of medication supplied per dispense\n* dispenseRequest.numberOfRepeatsAllowed: number of refills authorized\n* dispenseRequest.expectedSupplyDuration: number of days supply per dispense\n* dosageInstruction.timing.repeat.boundsDuration: total duration of the repeat\n* dosageInstruction.timing.repeat.boundsRange: range of durations of the repeat\n* dosageInstruction.timing.repeat.boundsPeriod: period bounds of the repeat\n* dosageInstruction.timing.repeat.count: number of times to repeat\n* dosageInstruction.timing.repeat.countMax: maximum number of times to repeat\n* dosageInstruction.timing.repeat.frequency: event occurs frequency times per period\n* dosageInstruction.timing.repeat.frequencyMax: event occurs up to frequencyMax times per period\n* dosageInstruction.timing.repeat.period: event occurs frequency times per period\n* dosageInstruction.timing.repeat.periodMax: upper limit of period\n* dosageInstruction.timing.repeat.periodUnit: period duration (s | min | h | d | wk | mo | a)\n* dosageInstruction.timing.repeat.timeOfDay: time of day for the event (0..*)\n* dosageInstruction.timing.repeat.when: event timing (HS | WAKE | C | CM | CD | CV | AC | ACM...)\n* dosageInstruction.timing.code: BID | TID | QID | AM | PM | QD | QOD...\n* dosageInstruction.asNeeded\n* dosageInstruction.doseAndRate.doseQuantity\n* dosageInstruction.doseAndRate.doseRange\nIf expectedSupplyDuration is present, then the duration is\n    expectedSupplyDuration * (1 + numberOfRepeatsAllowed)\nIf expectedSupplyDuration is not present, then it must be calculated based on the quantity, dosage, and frequency:\n    (quantity / (dosage * frequency)) * (1 + numberOfRepeatsAllowed)\n    dosage: Coalesce(end of doseAndRate.doseRange, doseAndRate.doseQuantity)\n    frequency: Coalesce(frequencyMax, frequency)\n    period: Quantity(period, periodUnit)\nIf expectedSupplyDuration is not present and cannot be calculated, and the boundsPeriod is present (and completely specified), we can use that directly\n    dosage.timing.repeat.boundsPeriod\nThis calculation results in a number of days, which can then be turned into a period by anchoring that to the\nstart of the validityPeriod or the authoredOn:\n    Interval[earliestDispensable, earliestDispensable + expectedSupplyDuration - 1]\n    earliestDispensable: Coalesce(start of validityPeriod, authoredOn)\nThe following function illustrates this completely:\n*/\n\n/*\nCalculates the Medication Period for a single MedicationRequest.\nMedicationRequest instances provided to this function are expected\nto conform to the [MMEMedicationRequest](http://build.fhir.org/ig/cqframework/opioid-mme-r4/StructureDefinition-mmemedicationrequest.html)\nprofile, which expects:\n* 1 and only 1 dosageInstruction, multiple dosageInstruction elements will result in an error\n* 1 and only 1 doseAndRate, multiple doseAndRate elements will result in an error\n* 1 timing with 1 repeat, missing timing or repeat elements will result in a null\n* frequency, frequencyMax, defaulting to 1\n* period, periodUnit, defaulting to 1 'd'\n* timeOfDay\n* doseQuantity or doseRange, missing doseQuantity and doseRange will result in a null\nNote that MedicationRequest status is not considered by this calculation, as the\nlist of MedicationRequest instances provided to this function should already have\nconsidered appropriate statuses, depending on the use case, typically `completed`.\n*/\ndefine function MedicationRequestPeriod(Request &quot;MedicationRequest&quot;):\n  Request R\n    let\n      dosage: singleton from R.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: Quantity(timing.repeat.period, timing.repeat.periodUnit),\n      doseRange: doseAndRate.dose,\n      doseQuantity: doseAndRate.dose,\n      dose: Coalesce(end of doseRange, doseQuantity),\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0),\n      boundsPeriod: timing.repeat.bounds as Interval&lt;DateTime&gt;,\n      daysSupply: (convert R.dispenseRequest.expectedSupplyDuration to days).value,\n      quantity: R.dispenseRequest.quantity,\n      refills: Coalesce(R.dispenseRequest.numberOfRepeatsAllowed, 0),\n      startDate:\n        Coalesce(\n          date from start of boundsPeriod,\n          date from R.authoredOn,\n          date from start of R.dispenseRequest.validityPeriod\n        ),\n      totalDaysSupplied: Coalesce(daysSupply, quantity.value / (dose.value * dosesPerDay)) * (1 + refills)\n    return\n      if startDate is not null and totalDaysSupplied is not null then\n        Interval[startDate, startDate + Quantity(totalDaysSupplied - 1, 'day') ]\n      else if startDate is not null and boundsPeriod.&quot;high&quot; is not null then\n        Interval[startDate, date from end of boundsPeriod]\n      else\n        null\n\n define fluent function medicationRequestPeriod(Request &quot;MedicationRequest&quot;):\n  Request R\n    let\n      dosage: singleton from R.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: Quantity(timing.repeat.period, timing.repeat.periodUnit),\n      doseRange: doseAndRate.dose,\n      doseQuantity: doseAndRate.dose,\n      dose: Coalesce(end of doseRange, doseQuantity),\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0),\n      boundsPeriod: timing.repeat.bounds as Interval&lt;DateTime&gt;,\n      daysSupply: (convert R.dispenseRequest.expectedSupplyDuration to days).value,\n      quantity: R.dispenseRequest.quantity,\n      refills: Coalesce(R.dispenseRequest.numberOfRepeatsAllowed, 0),\n      startDate:\n        Coalesce(\n          date from start of boundsPeriod,\n          date from R.authoredOn,\n          date from start of R.dispenseRequest.validityPeriod\n        ),\n      totalDaysSupplied: Coalesce(daysSupply, quantity.value / (dose.value * dosesPerDay)) * (1 + refills)\n    return\n      if startDate is not null and totalDaysSupplied is not null then\n        Interval[startDate, startDate + Quantity(totalDaysSupplied - 1, 'day') ]\n      else if startDate is not null and boundsPeriod.&quot;high&quot; is not null then\n        Interval[startDate, date from end of boundsPeriod]\n      else\n        null\n\n/*\nNext, consider the MedicationDispense case:\n* whenPrepared: When product was prepared\n* whenHandedOver: When product was given out\n* quantity: Amount dispensed\n* daysSupply: Amount of medication expressed as a timing amount\n* dosageInstruction.timing.repeat.boundsDuration: total duration of the repeat\n* dosageInstruction.timing.repeat.boundsRange: range of durations of the repeat\n* dosageInstruction.timing.repeat.boundsPeriod: period bounds of the repeat\n* dosageInstruction.timing.repeat.count: number of times to repeat\n* dosageInstruction.timing.repeat.countMax: maximum number of times to repeat\n* dosageInstruction.timing.repeat.frequency: event occurs frequency times per period\n* dosageInstruction.timing.repeat.frequencyMax: event occurs up to frequencyMax times per period\n* dosageInstruction.timing.repeat.period: event occurs frequency times per period\n* dosageInstruction.timing.repeat.periodMax: upper limit of period\n* dosageInstruction.timing.repeat.periodUnit: period duration (s | min | h | d | wk | mo | a)\n* dosageInstruction.timing.repeat.timeOfDay: time of day for the event (0..*)\n* dosageInstruction.timing.repeat.when: event timing (HS | WAKE | C | CM | CD | CV | AC | ACM...)\n* dosageInstruction.timing.code: BID | TID | QID | AM | PM | QD | QOD...\n* dosageInstruction.asNeeded\n* dosageInstruction.doseAndRate.doseQuantity\n* dosageInstruction.doseAndRate.doseRange\nWe have effectively the same elements, with the same meanings, with the exception that the\nevent is documenting a single dispense, and does not contain refill information. In addition,\nmultiple dispense events would typically be present, and those would all have to be considered\nas part of an overall calculation. That will be considered when we combine results, but for\nthis function, we'll focus on calculating the duration of a single dispense.\nWith a MedicationDispense, dosage information is expected to be the same as the related\nMedicationRequest, so boundsPeriod would still cover the entire prescription (including refills)\nand so cannot be used to calculate the interval covered by the dispense.\nIf the daysSupply element is present, then the duration in days is simply\n    daysSupply\nNote specifically that we are not considering refills, as those would be covered\nby subsequent dispense records.\nIf daysSupplied is not present, then daysSupplied must be calculated based on\nthe quantity, dosage, and frequency:\n    (quantity / (dosage * frequency))\nThis calculation results in a number of days, which can then be turned into a\nperiod by anchoring that to the startDate, as determined by the first available\nvalue of the start of the boundsPeriod, whenHandedOver, and whenPrepared.\n   Interval[startDate, startDate + totalDaysSupplied - 1 day]\n*/\n\n/*\nCalculates Medication Period for a given MedicationDispense\nMedicationDispense instances provided to this function are expected\nto conform to the [TODO: MMEMedicationDispense](http://build.fhir.org/ig/cqframework/opioid-mme-r4/StructureDefinition-mmemedicationdispense.html)\nprofile, which expects:\n* 1 and only 1 dosageInstruction, multiple dosageInstruction elements will result in an error\n* 1 and only 1 doseAndRate, multiple doseAndRate elements will result in an error\n* 1 timing with 1 repeat, missing timing or repeat elements will result in a null\n* frequency, frequencyMax, defaulting to 1\n* period, periodUnit, defaulting to 1 'd'\n* timeOfDay\n* doseQuantity or doseRange, missing doseQuantity and doseRange will result in a null\n* whenHandedOver or whenPrepared, if missing both whenHandedOver and whenPrepared will result in a null\nNote that MedicationDispense status is not considered by this calculation, as the\nlist of MedicationDispense instances provided to this function should already have\nconsidered appropriate statuses, depending on the use case, typically `completed`,\nespecially since whenHandedOver would be expected to be present for a completed\nMedicationDispense.\nNote also that the dosage information recorded in a dispense is expected to be a copy of the\ndispense information from the related medication request. As such, the boundsPeriod would be expected\nto cover the entire range, and should _not_ be used for timing of the event.\nThere is also active discussion in the Pharmacy WG about what date should be used if whenPrepared/whenHandedOver is not present.\nThis may take the form of an &quot;original creation date&quot;, but may also be a &quot;status change date&quot; for dispense events that are updating\nstatus of an existing dispense. That discussion is ongoing, so until that is resolved, this logic will return\nnull if whenPrepared/whenHandedOver are not available.\n*/\ndefine function MedicationDispensePeriod(Dispense &quot;MedicationDispense&quot;):\n  Dispense D\n    let\n      dosage: singleton from D.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: Quantity(timing.repeat.period, timing.repeat.periodUnit),\n      doseRange: doseAndRate.dose,\n      doseQuantity: doseAndRate.dose,\n      dose: Coalesce(end of doseRange, doseQuantity),\n      daysSupply: (convert D.daysSupply to days).value,\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0),\n      startDate:\n        Coalesce(\n          date from D.whenHandedOver,\n          date from D.whenPrepared\n        ),\n      totalDaysSupplied: Coalesce(daysSupply, D.quantity.value / (dose.value * dosesPerDay))\n    return\n      if startDate is not null and totalDaysSupplied is not null then\n        Interval[startDate, startDate + Quantity(totalDaysSupplied - 1, 'day')]\n      else\n        null\n\n /*\nCalculates Medication Period for a given MedicationDispense\nMedicationDispense instances provided to this function are expected\nto conform to the [TODO: MMEMedicationDispense](http://build.fhir.org/ig/cqframework/opioid-mme-r4/StructureDefinition-mmemedicationdispense.html)\nprofile, which expects:\n* 1 and only 1 dosageInstruction, multiple dosageInstruction elements will result in an error\n* 1 and only 1 doseAndRate, multiple doseAndRate elements will result in an error\n* 1 timing with 1 repeat, missing timing or repeat elements will result in a null\n* frequency, frequencyMax, defaulting to 1\n* period, periodUnit, defaulting to 1 'd'\n* timeOfDay\n* doseQuantity or doseRange, missing doseQuantity and doseRange will result in a null\n* whenHandedOver or whenPrepared, if missing both whenHandedOver and whenPrepared will result in a null\nNote that MedicationDispense status is not considered by this calculation, as the\nlist of MedicationDispense instances provided to this function should already have\nconsidered appropriate statuses, depending on the use case, typically `completed`,\nespecially since whenHandedOver would be expected to be present for a completed\nMedicationDispense.\nNote also that the dosage information recorded in a dispense is expected to be a copy of the\ndispense information from the related medication request. As such, the boundsPeriod would be expected\nto cover the entire range, and should _not_ be used for timing of the event.\nThere is also active discussion in the Pharmacy WG about what date should be used if whenPrepared/whenHandedOver is not present.\nThis may take the form of an &quot;original creation date&quot;, but may also be a &quot;status change date&quot; for dispense events that are updating\nstatus of an existing dispense. That discussion is ongoing, so until that is resolved, this logic will return\nnull if whenPrepared/whenHandedOver are not available.\n*/\ndefine fluent function medicationDispensePeriod(Dispense &quot;MedicationDispense&quot;):\n  Dispense D\n    let\n      dosage: singleton from D.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: Quantity(timing.repeat.period, timing.repeat.periodUnit),\n      doseRange: doseAndRate.dose,\n      doseQuantity: doseAndRate.dose,\n      dose: Coalesce(end of doseRange, doseQuantity),\n      daysSupply: (convert D.daysSupply to days).value,\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0),\n      startDate:\n        Coalesce(\n          date from D.whenHandedOver,\n          date from D.whenPrepared\n        ),\n      totalDaysSupplied: Coalesce(daysSupply, D.quantity.value / (dose.value * dosesPerDay))\n    return\n      if startDate is not null and totalDaysSupplied is not null then\n        Interval[startDate, startDate + Quantity(totalDaysSupplied - 1, 'day')]\n      else\n        null\n \n/*\nReturns the established therapeutic duration for a given medication.\nThis is likely measure specific, though could potentially be established for\nany drug and distributed as a CodeSystem supplement.\nDefaulting to 14 days here for illustration.\n*/\ndefine function TherapeuticDuration(medication Concept):\n  14 days\n\n /*\nNext we consider MedicationAdministration. This data type is typically used to\ncapture specific administration, with the relevantPeriod capturing start and stop\ntime of the administration event:\n* effective[x]: Start and end time of administration\nHowever, when calculating cumulative medication duration, it is typically the\ntherapeutic period of the medication that should be considered. Currently neither\nthe Medication nor MedicationKnowledge resources provide this information, so\nwe model it here as a function that can potentially be implemented in a variety\nof ways, including measure-specific values, as well as distribution as an RxNorm\ncode system supplement.\nHowever it is obtained, if therapeutic duration can be obtained, and the effective\nperiod has a start, the result will be\n    Interval[startDate, startDate + therapeuticDuration - 1 day]\nNOTE: Therapeutic duration needs to be established and until a way is implemented to\ndo that based on the medication, this logic is incomplete and should not be used.\n*/\ndefine function MedicationAdministrationPeriod(Administration &quot;MedicationAdministration&quot;):\n  Administration M\n    let\n      therapeuticDuration: TherapeuticDuration(Administration.medication),\n      startDate: date from start of Administration.effective\n    return\n      if startDate is not null and therapeuticDuration is not null then\n        Interval[startDate, startDate + therapeuticDuration - 1]\n      else\n        null\n\n /*\nNext we consider MedicationAdministration. This data type is typically used to\ncapture specific administration, with the relevantPeriod capturing start and stop\ntime of the administration event:\n* effective[x]: Start and end time of administration\nHowever, when calculating cumulative medication duration, it is typically the\ntherapeutic period of the medication that should be considered. Currently neither\nthe Medication nor MedicationKnowledge resources provide this information, so\nwe model it here as a function that can potentially be implemented in a variety\nof ways, including measure-specific values, as well as distribution as an RxNorm\ncode system supplement.\nHowever it is obtained, if therapeutic duration can be obtained, and the effective\nperiod has a start, the result will be\n    Interval[startDate, startDate + therapeuticDuration - 1 day]\nNOTE: Therapeutic duration needs to be established and until a way is implemented to\ndo that based on the medication, this logic is incomplete and should not be used.\n*/\ndefine fluent function medicationAdministrationPeriod(Administration &quot;MedicationAdministration&quot;):\n  Administration M\n    let\n      therapeuticDuration: TherapeuticDuration(Administration.medication),\n      startDate: date from start of Administration.effective\n    return\n      if startDate is not null and therapeuticDuration is not null then\n        Interval[startDate, startDate + therapeuticDuration - 1]\n      else\n        null\n\n/*\nNow that we have functions for determining the medication period for individual\nprescriptions, administrations, and dispenses, we can combine those using\nan overall cumulative medication duration calculation.\nThere are two broad approaches to calculating cumulative duration, one that _collapses_\noverlapping intervals so that calculations are not duplicated, and one that _rolls out_\noverlapping intervals so that the durations are laid end-to-end.\nFirst, we define a function that simply calculates CumulativeDuration of a set of\nintervals:\n*/\ndefine function CumulativeDuration(Intervals List&lt;Interval&lt;Date&gt;&gt;):\n   if Intervals is not null then ( Sum((collapse Intervals per day)X\n        return all(difference in days between start of X and \n          end of X\n        )+ 1\n    )\n  ) \n    else null\n\n /*\nNow that we have functions for determining the medication period for individual\nprescriptions, administrations, and dispenses, we can combine those using\nan overall cumulative medication duration calculation.\nThere are two broad approaches to calculating cumulative duration, one that _collapses_\noverlapping intervals so that calculations are not duplicated, and one that _rolls out_\noverlapping intervals so that the durations are laid end-to-end.\nFirst, we define a function that simply calculates CumulativeDuration of a set of\nintervals:\n*/\ndefine fluent function cumulativeDuration(Intervals List&lt;Interval&lt;Date&gt;&gt;):\n   if Intervals is not null then ( Sum((collapse Intervals per day)X\n        return all(difference in days between start of X and \n          end of X\n        )+ 1\n    )\n  ) \n    else null\n\n /*\nNext, we define a function that rolls out intervals:\n*/\ndefine function RolloutIntervals(intervals List&lt;Interval&lt;Date&gt;&gt;):\n intervals I aggregate all R starting ( null as List&lt;Interval&lt;Date&gt;&gt;): R\n    union ( { I X\n        let S: Max({ \n          end of Last(R)+ 1 day, start of X }\n        ),\n        E: S + Quantity(Coalesce(duration in days of X, 0), 'day')\n        return Interval[S, E]}\n    )\n\n  /*\nNext, we define a function that rolls out intervals:\n*/\ndefine fluent function rolloutIntervals(intervals List&lt;Interval&lt;Date&gt;&gt;):\n intervals I aggregate all R starting ( null as List&lt;Interval&lt;Date&gt;&gt;): R\n    union ( { I X\n        let S: Max({ \n          end of Last(R)+ 1 day, start of X }\n        ),\n        E: S + Quantity(Coalesce(duration in days of X, 0), 'day')\n        return Interval[S, E]}\n    )\n\n/*\nThen, we define a function that allows us to calculate based on the various medication\ntypes:\n*/\n\ndefine function MedicationPeriod(\n  medication Choice&lt;&quot;MedicationRequest&quot;,\n    &quot;MedicationDispense&quot;\n  &gt;):\n  case\n    when medication is MedicationRequest then MedicationRequestPeriod(medication)\n    when medication is MedicationDispense then MedicationDispensePeriod(medication)\n    else null\n  end\n\n /*\nThen, we define a function that allows us to calculate based on the various medication\ntypes:\n*/\n\ndefine fluent function medicationPeriod(\n  medication Choice&lt;&quot;MedicationRequest&quot;,\n    &quot;MedicationDispense&quot;\n  &gt;):\n  case\n    when medication is MedicationRequest then medication.medicationRequestPeriod()\n    when medication is MedicationDispense then medication.medicationDispensePeriod()\n    else null\n  end\n\n/*\nWe can then use this function, combined with the MedicationDuration functions above\nto calculate Cumulative Medication Duration:\nGenerally speaking, we want to _roll out_ intervals from dispense and administration\nevents, and then collapse across that result and intervals from prescriptions.\nNote also that the separation of medications by type should already be done\nby this stage as well.\nCalculations that combine dosages from different types of medications (such as Morphine Milligram Equivalent (MME)\nor Average MME) require further consideration.\n*/\n\ndefine function CumulativeMedicationDuration(\n  Medications List&lt;Choice&lt;&quot;MedicationRequest&quot;,\n    &quot;MedicationDispense&quot;\n  &gt;&gt;):\n  CumulativeDuration((\n      Medications M\n        where M is MedicationRequest\n        return MedicationRequestPeriod(M)\n    )\n      union (\n        RolloutIntervals(\n          Medications M\n            where M is MedicationDispense\n            return MedicationDispensePeriod(M)\n        )\n      )\n  )\n\n /*\nWe can then use this function, combined with the MedicationDuration functions above\nto calculate Cumulative Medication Duration:\nGenerally speaking, we want to _roll out_ intervals from dispense and administration\nevents, and then collapse across that result and intervals from prescriptions.\nNote also that the separation of medications by type should already be done\nby this stage as well.\nCalculations that combine dosages from different types of medications (such as Morphine Milligram Equivalent (MME)\nor Average MME) require further consideration.\n*/\n\ndefine fluent function cumulativeMedicationDuration(\nMedications List&lt;Choice&lt;&quot;MedicationRequest&quot;,\n&quot;MedicationDispense&quot;\n&gt;&gt;):\n((\nMedications M\nwhere M is MedicationRequest\nreturn M.medicationRequestPeriod()\n)\nunion (\n(\nMedications M\nwhere M is MedicationDispense\nreturn M.medicationDispensePeriod()\n).rolloutIntervals()\n)\n).cumulativeDuration()\n  /**********************************************************************/\n/* Functions in this region are copied from opioid-mme-r4             */\n/**********************************************************************/\n\ndefine function Quantity(value Decimal, unit String):\n  if value is not null then\n    System.Quantity { value: value, unit: unit }\n  else\n    null</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n        \n    </table>\n</div>"
  },
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.25.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": false
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "Overloads"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "HS",
      "display": "HS"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "WAKE",
      "display": "WAKE"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "C",
      "display": "C"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "CM",
      "display": "CM"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "CD",
      "display": "CD"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "CV",
      "display": "CV"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "AC",
      "display": "AC"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "ACM",
      "display": "ACM"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "ACD",
      "display": "ACD"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "ACV",
      "display": "ACV"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "PC",
      "display": "PC"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "PCM",
      "display": "PCM"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "PCD",
      "display": "PCD"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://terminology.hl7.org/CodeSystem/v3-TimingEvent",
      "code": "PCV",
      "display": "PCV"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "MORN",
      "display": "MORN"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "MORN.early",
      "display": "MORN.early"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "MORN.late",
      "display": "MORN.late"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "NOON",
      "display": "NOON"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "AFT",
      "display": "AFT"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "AFT.early",
      "display": "AFT.early"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "AFT.late",
      "display": "AFT.late"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "EVE",
      "display": "EVE"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "EVE.early",
      "display": "EVE.early"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "EVE.late",
      "display": "EVE.late"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "NIGHT",
      "display": "NIGHT"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-directReferenceCode",
    "valueCoding": {
      "system": "http://hl7.org/fhir/event-timing",
      "code": "PHS",
      "display": "PHS"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  } ],
  "url": "https://madie.cms.gov/Library/CumulativeMedicationDuration",
  "identifier": [ {
    "use": "official",
    "system": "https://madie.cms.gov/login",
    "value": "67928e2094e897688edaf46a"
  } ],
  "version": "5.0.000",
  "name": "CumulativeMedicationDuration",
  "title": "CumulativeMedicationDuration",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "date": "2025-05-27T15:45:21+00:00",
  "publisher": "ICF",
  "description": "This library provides cumulative medication duration calculation\nlogic for use with FHIR medication prescription, administration, and dispensing\nresources. The logic here follows the guidance provided as part of the 5.6\nversion of Quality Data Model.",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}